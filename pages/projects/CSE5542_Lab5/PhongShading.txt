Code for Phong shading by Skylar Wurster


<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;
    
    
    varying vec4 vEyePosition;
    varying vec4 vColor; 
    varying vec3 vNorm;
    varying mat4 vNormMatrix;
    varying vec4 temp;
    varying vec4 light_eye_position;
    varying vec3 ambient;
    varying vec3 diffuse;
    varying vec3 specular;
    varying float shininess;
    
    void main(void) {    
        
        vec3 light_vector_from_vertex = normalize(vec3(light_eye_position - vEyePosition));
        vec3 eye_vector_to_vertex = normalize(-vec3(vEyePosition));
        vec3 light_reflect_off_vertex = normalize(vec3(reflect(-light_vector_from_vertex, vNorm)));
    
        vec3 diff = diffuse * (max(dot(vNorm, light_vector_from_vertex), 0.0));
        vec3 spec = specular * pow((max(dot(light_reflect_off_vertex, eye_vector_to_vertex), 0.0)), shininess);
        if(dot(vNorm, light_vector_from_vertex) <= 0.0){
            spec = vec3(0.0, 0.0, 0.0);
        }    
        
    
        gl_FragColor = vec4(dot(vNorm, light_vector_from_vertex) * vec3(1.0, 1.0, 1.0), 1.0);
        gl_FragColor = vec4(ambient + diff + spec, 1.0);
    }
    </script>
    
    <!--  ************** Vertex Shader ************* --> 
    <script id="shader-vs" type="x-shader/x-vertex">
    precision mediump float;
    attribute vec3 aVertexPosition;
    attribute vec3 aVertexNormal;
    attribute vec4 aVertexColor;
    
    uniform mat4 uMMatrix;
    uniform mat4 uVMatrix;
    uniform mat4 uPMatrix;
    uniform mat4 uNMatrix;
    
    uniform vec3 material_ambient;
    uniform vec3 material_diffuse;
    uniform vec3 material_specular;
    uniform float material_shininess;
    
    uniform vec4 light_position;
    uniform vec3 light_ambient;
    uniform vec3 light_diffuse;
    uniform vec3 light_specular;
    
    varying vec4 vEyePosition;
    varying vec4 vColor;
    varying vec3 vNorm;
    varying mat4 vNormMatrix;
    varying vec4 temp;
    varying vec4 light_eye_position;
    varying vec3 ambient;
    varying vec3 diffuse;
    varying vec3 specular;
    varying float shininess;
    
    void main(void) {
        vEyePosition = uVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
        temp = aVertexColor;
        
        vNorm = normalize(aVertexNormal);
        vNorm = normalize(vec3(uNMatrix * vec4(aVertexNormal, 0.0)));
    
        light_eye_position = uVMatrix * light_position;
    
        specular = light_specular * material_specular;
        ambient = light_ambient * material_ambient;
        diffuse = light_diffuse * material_diffuse;
        shininess = material_shininess;
    
        gl_Position = uPMatrix * vEyePosition;
        gl_PointSize = 10.0;
    }
</script>