Code for Gouraud shading by Skylar Wurster


<script id="shader-fs" type="x-shader/x-fragment">
precision mediump float;


varying vec4 vEyePosition;
varying vec4 vColor; 
varying vec3 vNorm;
varying mat4 vNormMatrix;
varying vec4 temp;

void main(void) {    
    gl_FragColor = vColor;
}
</script>

<!--  ************** Vertex Shader ************* --> 
<script id="shader-vs" type="x-shader/x-vertex">
precision mediump float;
attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec4 aVertexColor;

uniform mat4 uMMatrix;
uniform mat4 uVMatrix;
uniform mat4 uPMatrix;
uniform mat4 uNMatrix;

uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;
uniform float material_shininess;

uniform vec4 light_position;
uniform vec3 light_ambient;
uniform vec3 light_diffuse;
uniform vec3 light_specular;

varying vec4 vEyePosition;
varying vec4 vColor;
varying vec3 vNorm;
varying mat4 vNormMatrix;
varying vec4 temp;

void main(void) {
    vEyePosition = uVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
    vNorm = normalize(aVertexNormal);
    temp = aVertexColor;
    
    vNorm = normalize(vec3(uNMatrix * vec4(aVertexNormal, 0.0)));
    vec4 light_eye_position = uVMatrix * light_position;
    vec3 light_vector_from_vertex = normalize(vec3(light_eye_position - vEyePosition));
    vec3 eye_vector_to_vertex = normalize(-vec3(vEyePosition));
    vec3 light_reflect_off_vertex = normalize(vec3(reflect(-light_vector_from_vertex, vNorm)));


    vec3 ambient = light_ambient * material_ambient;
    vec3 diffuse = light_diffuse * material_diffuse * (max(dot(vNorm, light_vector_from_vertex), 0.0));
    vec3 specular = light_specular * material_specular * pow((max(dot(light_reflect_off_vertex, eye_vector_to_vertex), 0.0)), material_shininess);
    if(dot(vNorm, light_vector_from_vertex) <= 0.0){
        specular = vec3(0.0, 0.0, 0.0);
    }    
    
    vColor = vec4(diffuse+ambient+specular, 1.0);
    float vColorMax = max(max(max(1.0, vColor[0]), vColor[1]), vColor[2]);

    
    gl_Position = uPMatrix * vEyePosition;
    gl_PointSize = 10.0;
}
</script>